library("here")
library("PerformanceAnalytics")
library("copula")
source(here("Functions", "f_black_scholes"))
source(here("Functions", "f_risk_measures"))
source(here("Functions", "f_load_data"))
source(here("Functions", "f_days_to_years"))
source(here("Functions", "f_linear_interpolation"))
source(here("Functions", "f_generate_log_returns"))
source(here("Functions", "f_cumul_returns"))
source(here("Run", "portefeuille_options.R"))

# Load data
data <- f_load_data()

# Define data
sp500 <- data$sp500
vix <- data$vix
rf <- data$rf
calls <- data$calls
puts <- data$puts

# Compute sp500 and VIX log returns
log_rets_sp500 <- as.vector(PerformanceAnalytics::CalculateReturns(sp500, method = "log")[-1])
log_rets_vix <- as.vector(PerformanceAnalytics::CalculateReturns(vix, method = "log")[-1])
log_rets <- cbind(log_rets_sp500, log_rets_vix)

# Compute mean and covariance matrix of past log returns
mu <- apply(log_rets, MARGIN = 2, FUN = mean)
Sigma <- cov(log_rets)

# Set parameters for scenario generation
scenarios <- 10000
n <- 5

# Set last SP500 & VIX
last_sp500 <- as.numeric(tail(sp500[, 1], n=1))
last_vix <- as.numeric(tail(vix[, 1], n=1))

# Generate samples from bivariate normal distribution
data <- f_generate_bivariate_log_returns(mu, Sigma, scenarios, n)

# Separate marginals
data_sp500 <- matrix(data[,"log_rets_sp500"], nrow = scenarios, ncol = n)
data_vix <- matrix(data[,"log_rets_vix"], nrow = scenarios, ncol = n)

# Compute cumulative returns and price for SP500
cumul_rets_sp500 <- f_cumul_returns(data_sp500, scenarios)
prices_sp500 <- last_sp500 * cumul_rets_sp500

# Compute cumulative returns and price for VIX
cumul_rets_vix <- f_cumul_returns(data_vix, scenarios)
prices_vix <- last_vix * cumul_rets_vix

# Set risk-free maturities (in years)
rf_maturities <- as.numeric(attr(rf, "names"))

# Set risk-free rates
rf_rates <- rf[,1]

# Define Black-Scholes variables
K <- c(1600, 1650, 1750, 1800)
T <- f_days_to_years(c(15, 15, 35, 35), 250)
T_r <- f_days_to_years(c(15, 15, 35, 35), 360)
r <- f_linear_interpolation(T_r, rf_maturities, rf_rates)

# Define option price matrix
options_prices <- matrix(data = NA, nrow = scenarios, ncol = 4)

for (i in 1:scenarios) {
    price_sp500 <- prices_sp500[i, n+1]
    price_vix <- prices_vix[i, n+1]
    S <- rep(price_sp500, 4)
    sig <- rep(price_vix, 4)
    prices <- f_black_scholes(S, K, r, T, sig, type="C")
    options_prices[i,] <- prices
}

# Option quantities
quantities <- c(1, 1, 1, 1)

# portfolio values t=5
values <- options_prices %*% quantities

# portfolio profits t=5
profits <- values - as.numeric(value)

# VaR
VaR <- f_VaR(profits, alpha = 0.95)

# Expected Shortfall
ES <- f_ES(profits, alpha = 0.95)