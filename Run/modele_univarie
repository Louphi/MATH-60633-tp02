library("here")
library("PerformanceAnalytics")

source(here("Run", "portefeuille_options.R"))

# Compute sp500 log returns
log_rets_sp500 <- as.vector(PerformanceAnalytics::CalculateReturns(sp500, method = "log")[-1])

# Compute mean and sd of past log returns
mu <- mean(log_rets_sp500)
sigma <- sd(log_rets_sp500)

# Set parameters for scenario generation
scenarios <- 10000
n <- 5

# Generate samples from bivariate normal distribution
data <- f_generate_univariate_log_returns(mu, sigma, scenarios, n)

# Define sp500 log returns matrix
data_sp500 <- matrix(data, nrow = scenarios, ncol = n)

# Compute cumulative returns and price for SP500
cumul_rets_sp500 <- f_cumul_returns(data_sp500, scenarios)
prices_sp500 <- last_sp500 * cumul_rets_sp500

# Define Black-Scholes variables
K <- c(1600, 1650, 1750, 1800)
T <- f_days_to_years(c(15, 15, 35, 35), 250)
T_r <- f_days_to_years(c(15, 15, 35, 35), 360)
r <- f_linear_interpolation(T_r, rf_maturities, rf_rates)

# Define option price matrix
options_prices_univarie <- matrix(data = NA, nrow = scenarios, ncol = 4)

for (i in 1:scenarios) {
    price_sp500 <- prices_sp500[i, n+1]
    S <- rep(price_sp500, 4)
    sig <- rep(last_vix, 4)
    prices <- f_black_scholes(S, K, r, T, sig, type="C")
    options_prices_univarie[i,] <- prices
}

# Option quantities
quantities <- c(1, 1, 1, 1)

# portfolio values t=5
values_univarie <- options_prices_univarie %*% quantities

# portfolio profits t=5
profits_univarie <- values_univarie - as.numeric(value)

# VaR
VaR_univarie <- f_VaR(profits_univarie, alpha = 0.95)

# Expected Shortfall
ES_univarie <- f_ES(profits_univarie, alpha = 0.95)
